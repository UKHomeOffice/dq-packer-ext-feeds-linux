---
- name: Pre-reqs for ansible to run
  hosts: all
  gather_facts: false
  become: yes
  pre_tasks:
    - raw: test -e /usr/bin/python || ( yum -y update && yum install -y python-minimal )

- name: Build External Feeds Linux Server.
  hosts: all
  become: true
  tasks:
  - name: EFU Group
    group:
      name: efu
      system: yes

  - name: Create wherescape user
    user:
      name: wherescape
      group: efu

  - name: Make directory structure
    file:
      path: /{{ item }}
      state: directory
      mode: 0775
      recurse: yes
      owner: wherescape
      group: efu
    with_items:
      - EF
      - appdata
      - appdata/EF
      - appdata/EF/archive
      - appdata/EF/data
      - appdata/EF/json
      - appdata/EF/keys
      - appdata/EF/log
      - appdata/EF/scripts
      - appdata/EF/sql

  - file:
      src: /appdata/EF
      dest: /EF
      force: yes
      owner: wherescape
      group: efu
      state: link

  - name: Create .ssh directory for Wherescape user
    file:
      path: /home/wherescape/.ssh
      state: directory
      mode: 0700
      owner: wherescape
      group: efu

  - name: Create authorized_keys file for Wherescape user
    copy:
      content: ""
      dest: /home/wherescape/.ssh/authorized_keys
      force: no
      mode: 0600
      owner: wherescape
      group: efu

  - name: Yum Install Pre Dependencies
    yum: name={{ item }}
    with_items:
      - epel-release
      - gcc
      - pcre-devel
      - openssl-devel
      - zlib-devel
      - wget
    become: true

  - name: Yum Install Dependencies
    yum: name={{ item }}
    with_items:
      - python-pip
      - git
      - cloud-utils
      - nodejs
    become: true

  - name: Pip Install Dependencies
    pip: 'name={{ item }}'
    with_items:
      - virtualenv
      - AWSCLI
      - ftputil
      - psycopg2
      - paramiko
      - argparse
      - boto3

  - name: Install Python 2.7
    unarchive:
     src: https://www.python.org/ftp/python/2.7.10/Python-2.7.10.tgz
     dest: /usr/src
     remote_src: yes
    become: true

  - name: Configure Python 2.7
    shell: ./configure
    args:
      chdir: /usr/src/Python-2.7.10
    creates: /usr/src/Python-2.7.10/Modules
    become: true

  - name: Pip Install AWSCLI
    pip: 'name={{ item }}'
    with_items:
      - AWSCLI
    become: true

  - name: Configure git to use HTTPS
    shell: git config --global url."https://".insteadOf git://

  - name: Clone script repos from Github
    git:
      repo: git://gitlab.digital.homeoffice.gov.uk/dacc-dq/external_feed.git
      version: update-vars
      dest: /opt/dq-packer-ext-feeds-linux
      key_file: '{{ git_key | b64decode }}'
      accept_hostkey: yes
      clone: yes
      update: no

  - name: Install Postgresql 9.6
    shell: '{{ item }}'
    with_items:
      - rpm -ivh https://yum.postgresql.org/9.6/redhat/rhel-7.3-x86_64/pgdg-centos96-9.6-3.noarch.rpm
      - yum update -y
      - yum install -y postgresql96

  - name: Symlink script files in opt
    file:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      force: yes
      state: link
      owner: wherescape
      group: efu
    with_items:
      - { src: '/opt/dq-packer-ext-feeds-linux/DB/scripts/', dest: '/appdata/EF/scripts'}
      - { src: '/opt/dq-packer-ext-feeds-linux/FTP/scripts/', dest: '/appdata/EF/aws/scripts'}

  - name: '{{ item.name }}'
    cron:
      user: '{{ item.user }}'
      minute: '{{ item.minute }}'
      hour: '{{ item.hour }}'
      day: '{{ item.day }}'
      job: '{{ item.job }}'
    with_items:
        - { name: Cron DRT_EF_FTP_AWS.py, user: ef, minute: "*/1",  hour: "*", day: "*",  job: "/appdata/EF/aws/scripts/DRT_EF_FTP_AWS.py" }

  - name: Download cloudwatch logs agent
    get_url:
      url: https://s3.amazonaws.com//aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
      dest: /tmp/awslogs-agent-setup.py
      mode: "+x"

  - name: Cloudwatch logs config
    copy:
      dest: /tmp/cwlogs.conf
      content: |
        [general]
        state_file = /var/awslogs/state/agent-state
        [/var/log/syslog]
        file = /var/log/syslog
        log_group_name = /Centos_Server/system
        log_stream_name = {instance_id}
        datetime_format = %b %d %H:%M:%S
        [/Centos_Server/cloud-init]
        file = /var/log/cloud-init.log
        log_group_name = /Centos_Server/cloud-init
        log_stream_name = {instance_id}
        datetime_format = %Y-%m-%d %H:%M:%S,%f
        [/Centos_Server/cloud-init/output]
        file = /var/log/cloud-init-output.log
        log_group_name = /Centos_Server/cloud-init/output
        log_stream_name = {instance_id}
        datetime_format = %Y-%m-%d %H:%M:%S,%f

  - name: Install cloudwatch log agent
    environment:
      LC_ALL: C
    shell: /tmp/awslogs-agent-setup.py --region eu-west-2 --non-interactive -c /tmp/cwlogs.conf
    args:
      creates: /var/awslogs/etc/aws.conf

  - name: Copy cloudwatch logs starter
    copy:
      src: startcloudwatchlogs.sh
      dest: /usr/bin/startcloudwatchlogs.sh
      owner: root
      group: root
      mode: 0755

  - name: Make Cron Job to start awslogs with right region
    cron:
      name: Start awslogs
      special_time: reboot
      job: /usr/bin/startcloudwatchlogs.sh

  - name: Set DNS Resolver Options
    blockinfile:
      path: /etc/sysconfig/network
      block: |
        RES_OPTIONS="rotate timeout:1 attempts:1"
